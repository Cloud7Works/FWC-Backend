/*
 * Revenue Management System
 *
 * Florida Fish and Wildlife Conservation Commision - Revenue Management System.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@fwc.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace FWC.RMS.ApplicationCore.DTOs
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DepartmentDocumentSearchRequest : IEquatable<DepartmentDocumentSearchRequest>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentDocumentNumber
        /// </summary>
        [DataMember(Name="departmentDocumentNumber")]
        public long? DepartmentDocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets DdnSearchType
        /// </summary>
        [DataMember(Name="ddnSearchType")]
        public string DdnSearchType { get; set; }

        /// <summary>
        /// Gets or Sets CheckNumber
        /// </summary>
        [DataMember(Name="checkNumber")]
        public long? CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets DepositNumber
        /// </summary>
        [DataMember(Name="depositNumber")]
        public long? DepositNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransmittalNumber
        /// </summary>
        [DataMember(Name="transmittalNumber")]
        public long? TransmittalNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransmittalStatus
        /// </summary>
        [DataMember(Name="transmittalStatus")]
        public string TransmittalStatus { get; set; }

        /// <summary>
        /// Gets or Sets CheckAmount
        /// </summary>
        [DataMember(Name="checkAmount")]
        public double? CheckAmount { get; set; }

        /// <summary>
        /// Gets or Sets CashListing
        /// </summary>
        [DataMember(Name="cashListing")]
        public string CashListing { get; set; }

        /// <summary>
        /// Gets or Sets EoCode
        /// </summary>
        [DataMember(Name="eoCode")]
        public string EoCode { get; set; }

        /// <summary>
        /// Gets or Sets ObjectCode
        /// </summary>
        [DataMember(Name="objectCode")]
        public string ObjectCode { get; set; }

        /// <summary>
        /// Gets or Sets DepositDateFrom
        /// </summary>
        [DataMember(Name="depositDateFrom")]
        public DateTime? DepositDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets DepositDateTo
        /// </summary>
        [DataMember(Name="depositDateTo")]
        public DateTime? DepositDateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartmentDocumentSearchRequest {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  DepartmentDocumentNumber: ").Append(DepartmentDocumentNumber).Append("\n");
            sb.Append("  DdnSearchType: ").Append(DdnSearchType).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  DepositNumber: ").Append(DepositNumber).Append("\n");
            sb.Append("  TransmittalNumber: ").Append(TransmittalNumber).Append("\n");
            sb.Append("  TransmittalStatus: ").Append(TransmittalStatus).Append("\n");
            sb.Append("  CheckAmount: ").Append(CheckAmount).Append("\n");
            sb.Append("  CashListing: ").Append(CashListing).Append("\n");
            sb.Append("  EoCode: ").Append(EoCode).Append("\n");
            sb.Append("  ObjectCode: ").Append(ObjectCode).Append("\n");
            sb.Append("  DepositDateFrom: ").Append(DepositDateFrom).Append("\n");
            sb.Append("  DepositDateTo: ").Append(DepositDateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DepartmentDocumentSearchRequest)obj);
        }

        /// <summary>
        /// Returns true if DepartmentDocumentSearchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DepartmentDocumentSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartmentDocumentSearchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    DepartmentDocumentNumber == other.DepartmentDocumentNumber ||
                    DepartmentDocumentNumber != null &&
                    DepartmentDocumentNumber.Equals(other.DepartmentDocumentNumber)
                ) && 
                (
                    DdnSearchType == other.DdnSearchType ||
                    DdnSearchType != null &&
                    DdnSearchType.Equals(other.DdnSearchType)
                ) && 
                (
                    CheckNumber == other.CheckNumber ||
                    CheckNumber != null &&
                    CheckNumber.Equals(other.CheckNumber)
                ) && 
                (
                    DepositNumber == other.DepositNumber ||
                    DepositNumber != null &&
                    DepositNumber.Equals(other.DepositNumber)
                ) && 
                (
                    TransmittalNumber == other.TransmittalNumber ||
                    TransmittalNumber != null &&
                    TransmittalNumber.Equals(other.TransmittalNumber)
                ) && 
                (
                    TransmittalStatus == other.TransmittalStatus ||
                    TransmittalStatus != null &&
                    TransmittalStatus.Equals(other.TransmittalStatus)
                ) && 
                (
                    CheckAmount == other.CheckAmount ||
                    CheckAmount != null &&
                    CheckAmount.Equals(other.CheckAmount)
                ) && 
                (
                    CashListing == other.CashListing ||
                    CashListing != null &&
                    CashListing.Equals(other.CashListing)
                ) && 
                (
                    EoCode == other.EoCode ||
                    EoCode != null &&
                    EoCode.Equals(other.EoCode)
                ) && 
                (
                    ObjectCode == other.ObjectCode ||
                    ObjectCode != null &&
                    ObjectCode.Equals(other.ObjectCode)
                ) && 
                (
                    DepositDateFrom == other.DepositDateFrom ||
                    DepositDateFrom != null &&
                    DepositDateFrom.Equals(other.DepositDateFrom)
                ) && 
                (
                    DepositDateTo == other.DepositDateTo ||
                    DepositDateTo != null &&
                    DepositDateTo.Equals(other.DepositDateTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (DepartmentDocumentNumber != null)
                    hashCode = hashCode * 59 + DepartmentDocumentNumber.GetHashCode();
                    if (DdnSearchType != null)
                    hashCode = hashCode * 59 + DdnSearchType.GetHashCode();
                    if (CheckNumber != null)
                    hashCode = hashCode * 59 + CheckNumber.GetHashCode();
                    if (DepositNumber != null)
                    hashCode = hashCode * 59 + DepositNumber.GetHashCode();
                    if (TransmittalNumber != null)
                    hashCode = hashCode * 59 + TransmittalNumber.GetHashCode();
                    if (TransmittalStatus != null)
                    hashCode = hashCode * 59 + TransmittalStatus.GetHashCode();
                    if (CheckAmount != null)
                    hashCode = hashCode * 59 + CheckAmount.GetHashCode();
                    if (CashListing != null)
                    hashCode = hashCode * 59 + CashListing.GetHashCode();
                    if (EoCode != null)
                    hashCode = hashCode * 59 + EoCode.GetHashCode();
                    if (ObjectCode != null)
                    hashCode = hashCode * 59 + ObjectCode.GetHashCode();
                    if (DepositDateFrom != null)
                    hashCode = hashCode * 59 + DepositDateFrom.GetHashCode();
                    if (DepositDateTo != null)
                    hashCode = hashCode * 59 + DepositDateTo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DepartmentDocumentSearchRequest left, DepartmentDocumentSearchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DepartmentDocumentSearchRequest left, DepartmentDocumentSearchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
